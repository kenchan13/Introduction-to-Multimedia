%%% HW2_Q2.m - bit reduction -> audio dithering -> noise shaping -> low-pass filter -> audio limiting -> normalization
%%% Follow the instructions (hints) and you can finish the homework

%% Clean variables and screen
clear all;close all;clc;

%% Visualization parameters (Change it if you want)
% Some Tips:
% (Tip 1) You can change the axis range to make the plotted result more clearly 
% (Tip 2) You can use subplot function to show multiple spectrums / shapes in one figure
titlefont = 15;
fontsize = 13;
LineWidth = 1.5;

%% 1. Read in input audio file ( audioread )
% Get input data wihtout normatization
% Great for bit reduction
[input, fs] = audioread('Tempest.wav');


%%% Plot the spectrum of input audio
subplot(4,2,1);
[frequency, magnitude] = makeSpectrum(input, fs);
plot(frequency, magnitude, 'LineWidth', LineWidth); 
title('Spectrum of Input Audio', 'fontsize', titlefont);
set(gca, 'fontsize', fontsize)
xlim([0 5000]);

%%% Plot the shape of input audio
subplot(4,2,2);
plot(input, 'LineWidth', LineWidth); 
title('Shape of Input Audio', 'fontsize', titlefont);
set(gca, 'fontsize', fontsize)
% xlim([100 1600]);


%% 2. Bit reduction
% (Hint) The input audio signal is double (-1 ~ 1)
input8bits = uint8( (input + 1)/2 * 255 );

%%% Save audio (audiowrite) Tempest_8bit.wav
% (Hint) remember to save the file with sampling rate = 8
audiowrite('Tempest_8bit.wav', input8bits, fs, 'BitsPerSample', 8);

%%% Plot the spectrum of the Bit reduction
subplot(4,2,3);
[freq_8bit, mang_8bit] = makeSpectrum(input8bits, fs);
plot(freq_8bit, mang_8bit, 'LineWidth', LineWidth); 
title('Spectrum of Bit Reduction', 'fontsize', titlefont);
set(gca, 'fontsize', fontsize);
xlim([50 2000]);
ylim([0 10^5]);

%% 3. Audio dithering
% (Hint) add random noise
[input8bits_nor, fs_nor] = audioread('Tempest_8bit.wav');
input8bits_dither = input8bits_nor + rand(size(input8bits_nor))/5;

%%% Plot the spectrum of the dithered result
subplot(4,2,4);
[freq_dither, mang_dither] = makeSpectrum(input8bits_dither, fs);
plot(freq_dither, mang_dither, 'LineWidth', LineWidth); 
title('Spectrum of Dithered Result', 'fontsize', titlefont);
set(gca, 'fontsize', fontsize);
xlim([50 2000]);
ylim([0 10^5]);

% sound(input8bits_dither, fs_nor);

%% 4. First-order feedback loop for Noise shaping
% (Hint) Check the signal value. How do I quantize the dithered signal? maybe scale up first?



%%% Plot the spectrum of noise shaping



%% 5. Implement Low-pass filter
N = 1999;
fcutoff1 = 600;
fcutoff2 = 0;
filterName = 'low-pass';
[lowpassOutput, outputFilter] = myFilter(input8bits_dither, fs, N, 'Blackman', filterName, fcutoff1, fcutoff2);

% sound(lowpassOutput, fs);

%% 6. Audio limiting(hard)
[row col] = size(lowpassOutput);
for (R = 1: row)
    for (C = 1:col)
        if lowpassOutput(R, C) >= 0.3
            lowpassOutput(R, C) = 0.3;
    end
end



%% 7. Normalization



%% 6. Save audio (audiowrite) Tempest_Recover.wav



%%% Plot the spectrum of output audio



%%% Plot the shape of output audio


